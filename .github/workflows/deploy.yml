name: DEPLOY - RunPod Endpoints

on:
  workflow_dispatch:
    inputs:
      model_type:
        description: 'Model to deploy'
        required: true
        default: 'unified_endpoint'
        type: choice
        options:
          - mistral_endpoint
          - nllb_endpoint
          - unified_endpoint
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
        type: string

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/translation-models

jobs:
  deploy:
    name: Deploy ${{ matrix.model_type }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        model_type: ${{ fromJson(format('["{0}"]', github.event.inputs.model_type)) }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Deploy to RunPod
      env:
        RUNPOD_API_KEY: ${{ secrets.RUNPOD_API_KEY }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        # Load config
        endpoint_name=$(jq -r '.["${{ matrix.model_type }}"].endpoint_name' runpod-config.json)
        model_type=$(jq -r '.["${{ matrix.model_type }}"].model_type' runpod-config.json)
        gpu_types=$(jq -r '.["${{ matrix.model_type }}"].gpu_types[0]' runpod-config.json)
        container_disk_size=$(jq -r '.template_config.container_disk_size' runpod-config.json)
        volume_size=$(jq -r '.template_config.volume_size' runpod-config.json)
        min_workers=$(jq -r '.["${{ matrix.model_type }}"].scaling.min_workers' runpod-config.json)
        max_workers=$(jq -r '.["${{ matrix.model_type }}"].scaling.max_workers' runpod-config.json)
        idle_timeout=$(jq -r '.["${{ matrix.model_type }}"].idle_timeout' runpod-config.json)
        
        template_name="burkimbia-translation-$model_type-template"
        target_image="${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}"
        
        echo "Deploying $endpoint_name (model: $model_type)"
        
        # Check/Create template
        existing_templates=$(curl -s -H "Authorization: Bearer $RUNPOD_API_KEY" "https://rest.runpod.io/v1/templates")
        template_id=$(echo "$existing_templates" | jq -r --arg name "$template_name" '.[] | select(.name == $name) | .id')
        
        if [ -z "$template_id" ] || [ "$template_id" = "null" ]; then
          echo "Creating template: $template_name"
          template_response=$(curl -s -X POST "https://rest.runpod.io/v1/templates" \
            -H "Authorization: Bearer $RUNPOD_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"name\": \"$template_name\",
              \"imageName\": \"$target_image\",
              \"isServerless\": true,
              \"containerDiskInGb\": $(echo $container_disk_size | sed 's/GB//'),
              \"volumeInGb\": $(echo $volume_size | sed 's/GB//'),
              \"env\": {
                \"HF_TOKEN\": \"$HF_TOKEN\",
                \"MODEL_TYPE\": \"$model_type\"
              }
            }")
          template_id=$(echo "$template_response" | jq -r '.id')
          echo "‚úÖ Template created: $template_id"
        else
          echo "‚úÖ Template exists: $template_id"
        fi
        
        # Create endpoint
        echo "Creating endpoint..."
        endpoint_response=$(curl -s -X POST "https://rest.runpod.io/v1/endpoints" \
          -H "Authorization: Bearer $RUNPOD_API_KEY" \
          -H "Content-Type: application/json" \
          -d "{
            \"name\": \"$endpoint_name\",
            \"templateId\": \"$template_id\",
            \"gpuTypeIds\": [\"$gpu_types\"],
            \"idleTimeout\": $idle_timeout,
            \"workersMin\": $min_workers,
            \"workersMax\": $max_workers
          }")
        
        endpoint_id=$(echo "$endpoint_response" | jq -r '.id')
        
        if [ -n "$endpoint_id" ] && [ "$endpoint_id" != "null" ]; then
          echo "‚úÖ Endpoint deployed: $endpoint_id"
          echo "üåê URL: https://api.runpod.ai/v2/$endpoint_id/run"
        else
          echo "‚ùå Deploy failed: $endpoint_response"
          exit 1
        fi

