name: BUILD - Multi-Service Docker Images

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - translation
          - transcription
          - speech
      image_tag:
        description: 'Docker image tag to build'
        required: false
        default: 'latest'
        type: string
      push_image:
        description: 'Push image to registry?'
        required: false
        default: true
        type: boolean
      test_build:
        description: 'Run build tests?'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  # Determine which services to build
  prepare:
    name: Determine Build Matrix
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.matrix.outputs.services }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Determine services to build
      id: matrix
      run: |
        if [ "${{ github.event.inputs.service }}" != "" ] && [ "${{ github.event.inputs.service }}" != "all" ]; then
          # Manual selection
          SERVICES='["${{ github.event.inputs.service }}"]'
          echo "Manual build: ${{ github.event.inputs.service }}"
        elif [ "${{ github.event.inputs.service }}" = "all" ]; then
          # Force all
          SERVICES='["translation", "transcription", "speech"]'
          echo "Manual build: all services"
        else
          # Auto-detect changes
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "all")
          else
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD 2>/dev/null || echo "all")
          fi
          
          echo "Changed files: $CHANGED_FILES"
          
          SERVICES="[]"
          if echo "$CHANGED_FILES" | grep -q "translation/" || echo "$CHANGED_FILES" | grep -q "^src/" || [ "$CHANGED_FILES" = "all" ]; then
            SERVICES=$(echo "$SERVICES" | jq -c '. + ["translation"]')
          fi
          if echo "$CHANGED_FILES" | grep -q "transcription/" || [ "$CHANGED_FILES" = "all" ]; then
            SERVICES=$(echo "$SERVICES" | jq -c '. + ["transcription"]')
          fi
          if echo "$CHANGED_FILES" | grep -q "speech/" || [ "$CHANGED_FILES" = "all" ]; then
            SERVICES=$(echo "$SERVICES" | jq -c '. + ["speech"]')
          fi
          
          echo "Auto-detected services: $SERVICES"
        fi
        
        echo "services=$SERVICES" >> $GITHUB_OUTPUT

  test:
    name: Pre-Build Tests
    runs-on: ubuntu-latest
    needs: [prepare]
    if: github.event.inputs.test_build != 'false' && needs.prepare.outputs.services != '[]'
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black

    - name: Lint service code
      run: |
        if [ -d "${{ matrix.service }}/src" ]; then
          flake8 ${{ matrix.service }}/src --count --select=E9,F63,F7,F82 --show-source --statistics
        fi
        if [ -d "src" ] && [ "${{ matrix.service }}" = "translation" ]; then
          flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        fi

    - name: Auto-format service code
      run: |
        if [ -d "${{ matrix.service }}/src" ]; then
          black ${{ matrix.service }}/src
        fi
        if [ -d "src" ] && [ "${{ matrix.service }}" = "translation" ]; then
          black src
        fi

    - name: Basic syntax check
      run: |
        if [ -d "${{ matrix.service }}/src" ]; then
          find ${{ matrix.service }}/src -name "*.py" -exec python -m py_compile {} \;
        fi
        if [ -d "src" ] && [ "${{ matrix.service }}" = "translation" ]; then
          find src -name "*.py" -exec python -m py_compile {} \;
        fi

  build:
    name: Build ${{ matrix.service }} Service
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [prepare, test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && needs.prepare.outputs.services != '[]'
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Free up disk space
      run: |
        echo "Disk space before cleanup:"
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        echo "Disk space after cleanup:"
        df -h
    
    - name: Start build timer
      id: start-time
      run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        buildkitd-flags: --debug
    
    - name: Log in to Docker Hub
      if: github.event.inputs.push_image != 'false'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "Vérification des credentials Docker..."
        echo "DOCKER_USERNAME length: ${#DOCKER_USERNAME}"
        echo "DOCKER_PASSWORD length: ${#DOCKER_PASSWORD}"
        
        if [ -z "$DOCKER_USERNAME" ]; then
          echo "❌ DOCKER_USERNAME secret est vide ou non défini"
          exit 1
        fi
        if [ -z "$DOCKER_PASSWORD" ]; then
          echo "❌ DOCKER_PASSWORD secret est vide ou non défini"
          exit 1
        fi
        
        echo "✅ Credentials Docker disponibles"
        echo "Username: $DOCKER_USERNAME"
        echo "Connexion à Docker Hub..."
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    
    - name: Set image name and context
      id: config
      run: |
        SERVICE="${{ matrix.service }}"
        IMAGE_NAME="${{ env.DOCKER_USERNAME }}/${SERVICE}-service"
        
        # Determine build context
        if [ "$SERVICE" = "translation" ]; then
          # Translation can use root context (backward compatibility) or service context
          if [ -f "translation/Dockerfile" ]; then
            BUILD_CONTEXT="translation"
          else
            BUILD_CONTEXT="."
          fi
        else
          BUILD_CONTEXT="$SERVICE"
        fi
        
        echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT
        echo "build-context=$BUILD_CONTEXT" >> $GITHUB_OUTPUT
        echo "Building $SERVICE service with image: $IMAGE_NAME"
        echo "Build context: $BUILD_CONTEXT"
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.config.outputs.image-name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ github.event.inputs.image_tag || 'latest' }},enable={{is_default_branch}}
          type=raw,value=run-${{ github.run_number }}
        labels: |
          org.opencontainers.image.title=${{ matrix.service }} Service
          org.opencontainers.image.description=Docker image for ${{ matrix.service }} AI service
    
    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v5
      timeout-minutes: 45
      with:
        context: ${{ steps.config.outputs.build-context }}
        platforms: linux/amd64
        push: ${{ github.event.inputs.push_image != 'false' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.service }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service }}
        outputs: type=image,push=${{ github.event.inputs.push_image != 'false' }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          HF_TOKEN=${{ secrets.HF_TOKEN }}
          RUNPOD_API_KEY=${{ secrets.RUNPOD_API_KEY }}
    
    - name: Calculate build time
      id: timing
      run: |
        start_time=${{ steps.start-time.outputs.start-time }}
        end_time=$(date +%s)
        build_time=$((end_time - start_time))
        echo "build-time=${build_time}" >> $GITHUB_OUTPUT
        echo "Build completed in ${build_time} seconds"

  cleanup:
    name: Cleanup Old Docker Images
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.build.result == 'success' && github.event_name == 'push' && needs.prepare.outputs.services != '[]'
    continue-on-error: true
    strategy:
      matrix:
        service: ${{ fromJson(needs.prepare.outputs.services) }}
    
    steps:
    - name: Delete old Docker Hub images for ${{ matrix.service }}
      run: |
        echo "Cleaning up old ${{ matrix.service }} Docker images (keeping latest 3)..."
        
        # Get list of tags from Docker Hub API
        REPO="${{ env.DOCKER_USERNAME }}/${{ matrix.service }}-service"
        TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ env.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKER_PASSWORD }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
        
        # Get all tags (excluding latest, main)
        TAGS=$(curl -s -H "Authorization: JWT ${TOKEN}" "https://hub.docker.com/v2/repositories/${REPO}/tags/?page_size=100" | jq -r '.results[] | select(.name != "latest" and .name != "main" and (.name | startswith("run-"))) | .name' | sort -V | head -n -3)
        
        # Delete old tags
        for tag in $TAGS; do
          echo "Deleting tag: $tag"
          curl -s -X DELETE -H "Authorization: JWT ${TOKEN}" "https://hub.docker.com/v2/repositories/${REPO}/tags/${tag}/" || echo "Failed to delete $tag"
        done
        
        echo "Cleanup completed for ${{ matrix.service }} - kept latest 3 images"